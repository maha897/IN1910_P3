import numpy as np
import matplotlib.pyplot as plt
import re


class ChaosGame:
    """Simulates The Chaos game, an algorithm proposed by Barnsley in his book Fractals Everywhere. """
    
    def __init__(self, n: int, r: float=1/2) -> None:
        """Contructor of ChaosGame. Creates a n-gon.

        Args:
            n (int): 
                decides number of corners of n-gon.
            r (float): 
                ratio between two points.
                e.g. if r = 1/2 it's the midpoint, if r = 1/3 it's one third towards the corner, etc.
        """

        if not (isinstance(n, int) and isinstance(r, (float, int))):
            raise TypeError
        if n < 3 or 0 >= r or r >= 1:
            raise ValueError("n must be n >= 3 and r must be 0 < r < 1.")
        
        self.n = n 
        self.r = r
        self._generate_ngon()
        self.iterate(5000)
            
    def _generate_ngon(self) -> None:
        """Generates corners of n-gon."""

        theta = np.linspace(0, 2*np.pi, self.n, endpoint=False)
        self.corners = np.zeros((self.n, 2))

        for i in range(self.n):
            self.corners[i] = np.sin(theta[i]), np.cos(theta[i])

    def plot_ngon(self) -> None:
        """Plots ngon."""

        c = self.corners
        x_vals = []
        y_vals = []

        for i in range(len(c)):
            x_vals.append(c[i][0])
            y_vals.append(c[i][1])

        for i in range(len(c)-1):
            plt.plot([x_vals[i], x_vals[i+1]], [y_vals[i], y_vals[i+1]])

        plt.plot([x_vals[-1], x_vals[0]], [y_vals[-1], y_vals[0]])
        plt.grid(True)
    
    def show_ngon(self) -> None:
        """Displays plot of the n-gon (plot_ngon()) to screen."""

        self.plot_ngon()
        plt.show()
        plt.close()

    def _starting_point(self) -> np.ndarray:
        """Creates a starting-point within area of n-gon.

        Returns:
            (np.ndarray): 
                the coordinates of the generated point.
        """

        w = np.random.random(size=self.n)
        w = w/np.sum(w)
        
        x = 0; y = 0
        for i in range(self.n):
            x += w[i]*self.corners[i][0]
            y += w[i]*self.corners[i][1]

        return np.array([x, y])

    def plot_N_starting_points(self, N: int) -> None:
        """Plots N starting points within n-gon.

        Args:
            N (int): 
                number of points.
        """

        self.plot_ngon()

        for _ in range(N):
            point = self._starting_point()
            plt.scatter(point[0], point[1])

        plt.show()
        plt.close()

    def iterate(self, steps: int, discard: int=5) -> np.ndarray:
        """Iterates from a starting point and computes the next point as
        X[i+1] = r*X[i] + (1 - r)*c[j] for each iteration.

        Args:
            steps (int): 
                number of iterations.
            discard (int, optional): 
                discards the first <discard> numbers of points. Defaults to 5.

        Returns:
            np.ndarray: 
                generated points and indices of the randomly picked corners.
        """

        indices = np.zeros(steps+discard)
        points = np.zeros((steps+discard, 2))
        points[0] = self._starting_point()

        for i in range(1, steps+discard):
            j = np.random.randint(self.n)
            indices[i] = j
            points[i] = self.r*points[i-1] + (1 - self.r)*self.corners[j]
            
        self.points = points[discard:]
        self.indices = indices[discard:]

    def plot(self, color: bool=False, cmap: str="rainbow") -> None:
        """Plots generated points.

        Args:
            color (Boolean, optional):
                boolean for colored plot. Defaults to False.
            cmap (str, optional): 
                colormap. Defaults to "rainbow".
        """

        if color:
            colors = self.gradient_color
        else: 
            colors = "black"

        plt.scatter(*zip(*self.points), c=colors, cmap=cmap, marker=".", s=2)
        plt.axis("equal")
        plt.axis("off")
    
    def show(self, color: bool=False, cmap: str="rainbow") -> None:
        """Displays plot generated by plot function.

        Args:
            color (Boolean, optional):
                boolean for colored plot. Defaults to False.
            cmap (str, optional): 
                colormap. Defaults to "rainbow".
        """

        self.plot(color, cmap)
        plt.show()

    @property 
    def gradient_color(self) -> np.ndarray:
        N = len(self.indices)
        C = np.zeros(N)
        C[0] = self.indices[0]

        for i in range(N-1):
            C[i+1] = (C[i] + self.indices[i+1])/2
        
        return C

    def savepng(self, outfile: str, color: bool=False, cmap: str="rainbow") -> None:
        """Saves plot generated from plot function.

        Args:
            outfile (str): 
                name of the outputfile.
            color (Boolean, optional): 
                boolean for colored plot. Defaults to False.
            cmap (str, optional): 
                colormap. Defaults to "rainbow".
        """

        if outfile.endswith(".png"):
            pass
        elif re.search(r"\.", outfile):
            raise ValueError("Invalid file format.")
        elif not outfile.endswith(".png"):
            outfile += ".png"

        print(f"Saving plot as {outfile}.")
        self.plot(color, cmap)
        plt.savefig(outfile, dpi=300)
        plt.close()


def make_figure(m: int, n: int, r: float):
    """Makes and saves figure using the method savepng of Chaosgame.

    Args:
        m (int): 
            number depicting plot
        n (int): 
            used to instanciate ChaosGame class, creates n-gon.
        r (float): 
            used to instanciate ChaosGame class, the ratio.
    """

    cg = ChaosGame(n, r)
    cg.savepng(f"figures/chaos{m}.png", color=True)

if __name__ == "__main__":
    # Exercise 2b
    for n in range(3, 9):
        ChaosGame(n).show_ngon()

    # Exercise 2c
    ChaosGame(5).plot_N_starting_points(1000)
  
    # Exercise 2e/2f
    ChaosGame(3).show()
    ChaosGame(3).show(True)

    # Exercise 2i
    n = [3, 4, 5, 5, 6]
    r = [1/2, 1/3, 1/3, 3/8, 1/3]

    for i in range(5):
        make_figure(i+1, n[i], r[i])
